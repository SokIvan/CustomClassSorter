package com.aston;

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã JUnit Platform –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
import org.junit.platform.engine.discovery.DiscoverySelectors;
import org.junit.platform.launcher.Launcher;
import org.junit.platform.launcher.LauncherDiscoveryRequest;
import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;
import org.junit.platform.launcher.core.LauncherFactory;
import org.junit.platform.launcher.listeners.SummaryGeneratingListener;
import org.junit.platform.launcher.listeners.TestExecutionSummary;

public class MainTestRunner {
    public static void main(String[] args) {
        // –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        System.out.println("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø–∞–∫–µ—Ç–µ com.aston ...\n");

        // –°–æ–∑–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –≤ –ø–∞–∫–µ—Ç–µ "com.aston"
        LauncherDiscoveryRequest request = LauncherDiscoveryRequestBuilder.request()
                .selectors(DiscoverySelectors.selectPackage("com.aston")) // –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –∏–∑ –ø–∞–∫–µ—Ç–∞
                .build();

        // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç Launcher ‚Äî –¥–≤–∏–∂–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ç–µ—Å—Ç—ã
        Launcher launcher = LauncherFactory.create();

        // –°–ª—É—à–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
        SummaryGeneratingListener listener = new SummaryGeneratingListener();

        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
        launcher.execute(request, listener);

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        TestExecutionSummary summary = listener.getSummary();

        // –í—ã–≤–æ–¥ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        System.out.println("\n===== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í =====");
        System.out.println("–£—Å–ø–µ—à–Ω—ã—Ö: " + summary.getTestsSucceededCount());
        System.out.println("–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: " + summary.getTestsFailedCount());
        System.out.println("–ü—Ä–æ–ø—É—â–µ–Ω–æ: " + summary.getTestsSkippedCount());
        System.out.println("–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: " + summary.getTestsFoundCount());

        // –ï—Å–ª–∏ –µ—Å—Ç—å —É–ø–∞–≤—à–∏–µ —Ç–µ—Å—Ç—ã ‚Äî –≤—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
        if (summary.getFailures().size() > 0) {
            System.out.println("\n----- –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–æ–≤ -----");
            summary.getFailures().forEach(failure -> {
                System.out.println("–¢–µ—Å—Ç: " + failure.getTestIdentifier().getDisplayName());
                System.out.println("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: " + failure.getException());
                System.out.println();
            });
        }

        System.out.println("\nüèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ.");
    }
}
